@use "sass:string";
@use 'sass:list';

@use '../abstracts/' as *;
@use '../themes/' as *;
@use './colors' as *;

$utilities: () !default;

$utilities: map-merge(
    $utilities,
    (
        // vertical align utilities
        "align": (
            property: vertical-align,
            class: align,
            values: baseline top middle bottom text-bottom text-top
        ),
        // float utilities
        "float": (
            responsive: true,
            property: float,
            values: (
                start: left,
                end: right,
                none: none,
            )
        ),
        // object fit utilities
        "object-fit": (
            responsive: true,
            property: object-fit,
            values: (
                contain: contain,
                cover: cover,
                fill: fill,
                scale: scale-down,
                none: none,
            )
        ),
        // opacity utilities
        "opacity": (
            property: opacity,
            values: (
                0: 0,
                25: .25,
                50: .5,
                75: .75,
                100: 1,
            )
        ),
        // overflow utilities
        "overflow": (
            property: overflow,
                values: auto hidden visible scroll,
        ),
        "overflow-x": (
            property: overflow-x,
            values: auto hidden visible scroll,
        ),
        "overflow-y": (
            property: overflow-y,
            values: auto hidden visible scroll,
        ),
        // display utilities
        "display": (
            responsive: true,
            print: true,
            property: display,
            class: d,
            values: inline inline-block block grid inline-grid table table-row table-cell flex inline-flex none
        ),
        // box shadow utilities
        "shadow": (
            property: box-shadow,
            class: shadow,
            values: (
                null: var(--#{$prefix}box-shadow),
                sm: var(--#{$prefix}box-shadow-sm),
                lg: var(--#{$prefix}box-shadow-lg),
                none: none,
            )
        ),
        // focus ring utilities
        "focus-ring": (
            css-var: true,
            css-variable-name: focus-ring-color,
            class: focus-ring,
            values: map-loop($theme-colors-rgb, rgba-css-var, "$key", "focus-ring")
        ),
        // position utilities
        "position": (
            property: position,
            values: static relative absolute fixed sticky
        ),
        "top": (
            property: top,
            values: $position-values
        ),
        "bottom": (
            property: bottom,
            values: $position-values
        ),
        "start": (
            property: left,
            class: start,
            values: $position-values
        ),
        "end": (
            property: right,
            class: end,
            values: $position-values
        ),
        "translate-middle": (
            property: transform,
            class: translate-middle,
            values: (
                null: translate(-50%, -50%),
                x: translateX(-50%),
                y: translateY(-50%),
            )
        ),
        // border utilities
        "border": (
            property: border,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
                0: 0,
            )
        ),
        "border-top": (
            property: border-top,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
                0: 0,
            )
        ),
        "border-end": (
            property: border-right,
            class: border-end,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
                0: 0,
            )
        ),
        "border-bottom": (
            property: border-bottom,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
                0: 0,
            )
        ),
        "border-start": (
            property: border-left,
            class: border-start,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
                0: 0,
            )
        ),
        "border-color": (
            property: border-color,
            class: border,
            local-vars: (
                "border-opacity": 1
            ),
            values: $utilities-border-colors
        ),
        "subtle-border-color": (
            property: border-color,
            class: border,
            values: $utilities-border-subtle
        ),
        "border-width": (
            property: border-width,
            class: border,
            values: $border-widths
        ),
        "border-opacity": (
            css-var: true,
            class: border-opacity,
            values: (
                10: .1,
                25: .25,
                50: .5,
                75: .75,
                100: 1
            )
        ),
        // sizing utilities
        "width": (
            property: width,
            class: w,
            values: (
                25: 25%,
                50: 50%,
                75: 75%,
                100: 100%,
                auto: auto
            )
        ),
        "max-width": (
            property: max-width,
            class: mw,
            values: (
                100: 100%
            )
        ),
        "viewport-width": (
            property: width,
            class: vw,
            values: (
                100: 100vw
            )
        ),
        "min-viewport-width": (
            property: min-width,
            class: min-vw,
            values: (
                100: 100vw
            )
        ),
        "height": (
            property: height,
            class: h,
            values: (
                25: 25%,
                50: 50%,
                75: 75%,
                100: 100%,
                auto: auto
            )
        ),
        "max-height": (
            property: max-height,
            class: mh,
            values: (
                100: 100%
            )
        ),
        "viewport-height": (
            property: height,
            class: vh,
            values: (
                100: 100vh
            )
        ),
        "min-viewport-height": (
            property: min-height,
            class: min-vh,
            values: (
                100: 100vh
            )
        ),
        // flex utilities
        "flex": (
            responsive: true,
            property: flex,
            values: (
                fill: 1 1 auto
            )
        ),
        "flex-direction": (
            responsive: true,
            property: flex-direction,
            class: flex,
            values: row column row-reverse column-reverse
        ),
        "flex-grow": (
            responsive: true,
            property: flex-grow,
            class: flex,
            values: (
                grow-0: 0,
                grow-1: 1,
            )
        ),
        "flex-shrink": (
            responsive: true,
            property: flex-shrink,
            class: flex,
            values: (
                shrink-0: 0,
                shrink-1: 1,
            )),
        "flex-wrap": (
            responsive: true,
            property: flex-wrap,
            class: flex,
            values: wrap nowrap wrap-reverse
        ),
        "justify-content": (
            responsive: true,
            property: justify-content,
            values: (
                start: flex-start,
                end: flex-end,
                center: center,
                between: space-between,
                around: space-around,
                evenly: space-evenly,
            )
        ),
        "align-items": (
            responsive: true,
            property: align-items,
            values: (
                start: flex-start,
                end: flex-end,
                center: center,
                baseline: baseline,
                stretch: stretch,
            )
        ),
        "align-content": (
            responsive: true,
            property: align-content,
            values: (
                start: flex-start,
                end: flex-end,
                center: center,
                between: space-between,
                around: space-around,
                stretch: stretch,
            )
        ),
        "align-self": (
            responsive: true,
            property: align-self,
            values: (
                auto: auto,
                start: flex-start,
                end: flex-end,
                center: center,
                baseline: baseline,
                stretch: stretch,
            )
        ),
        "order": (
            responsive: true,
            property: order,
            values: (
                first: -1,
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
                last: 6,
            ),
        ),
        // margin utilities
        "margin": (
            responsive: true,
            property: margin,
            class: m,
            values: map-merge(
                $spacers,
                (auto: auto)
            )
        ),
        "margin-x": (
            responsive: true,
            property: margin-right margin-left,
            class: mx,
            values: map-merge(
                $spacers,
                (auto: auto)
            )
        ),
        "margin-y": (
            responsive: true,
            property: margin-top margin-bottom,
            class: my,
            values: map-merge(
                $spacers,
                (auto: auto)
            )
        ),
        "margin-top": (
            responsive: true,
            property: margin-top,
            class: mt,
            values: map-merge(
                $spacers,
                (auto: auto)
            )
        ),
        "margin-end": (
            responsive: true,
            property: margin-right,
            class: me,
            values: map-merge(
                $spacers,
                (auto: auto)
            )
        ),
        "margin-bottom": (
            responsive: true,
            property: margin-bottom,
            class: mb,
            values: map-merge(
                $spacers, (auto: auto)
            )
        ),
        "margin-start": (
            responsive: true,
            property: margin-left,
            class: ms,
            values: map-merge(
                $spacers,
                (auto: auto)
            )
        ),
        // negative margin utilities
        "negative-margin": (
            responsive: true,
            property: margin,
            class: m,
            values: $negative-spacers
        ),
        "negative-margin-x": (
            responsive: true,
            property: margin-right margin-left,
            class: mx,
            values: $negative-spacers
        ),
        "negative-margin-y": (
            responsive: true,
            property: margin-top margin-bottom,
            class: my,
            values: $negative-spacers
        ),
        "negative-margin-top": (
            responsive: true,
            property: margin-top,
            class: mt,
            values: $negative-spacers
        ),
        "negative-margin-end": (
            responsive: true,
            property: margin-right,
            class: me,
            values: $negative-spacers
        ),
        "negative-margin-bottom": (
            responsive: true,
            property: margin-bottom,
            class: mb,
            values: $negative-spacers
        ),
        "negative-margin-start": (
            responsive: true,
            property: margin-left,
            class: ms,
            values: $negative-spacers
        ),
        // padding utilities
        "padding": (responsive: true,
            property: padding,
            class: p,
            values: $spacers
        ),
        "padding-x": (
            responsive: true,
            property: padding-right padding-left,
            class: px,
            values: $spacers
        ),
        "padding-y": (
            responsive: true,
            property: padding-top padding-bottom,
            class: py,
            values: $spacers
        ),
        "padding-top": (
            responsive: true,
            property: padding-top,
            class: pt,
            values: $spacers
        ),
        "padding-end": (
            responsive: true,
            property: padding-right,
            class: pe,
            values: $spacers
        ),
        "padding-bottom": (
            responsive: true,
            property: padding-bottom,
            class: pb,
            values: $spacers
        ),
        "padding-start": (
            responsive: true,
            property: padding-left,
            class: ps,
            values: $spacers
        ),
        // gap utilities
        "gap": (
            responsive: true,
            property: gap,
            class: gap,
            values: $spacers
        ),
        "row-gap": (
            responsive: true,
            property: row-gap,
            class: row-gap,
            values: $spacers
        ),
        "column-gap": (
            responsive: true,
            property: column-gap,
            class: column-gap,
            values: $spacers
        ),
        // text utilities
        "font-family": (
            property: font-family,
            class: font,
            values: (
                monospace: var(--#{$prefix}font-monospace)
            )
        ),
        "font-size": (
            property: font-size,
            class: fs,
            values: $font-sizes
        ),
        "font-style": (
            property: font-style,
            class: fst,
            values: italic normal
        ),
        "font-weight": (
            property: font-weight,
            class: fw,
            values: (
                100: $font-weight-100,
                200: $font-weight-200,
                300: $font-weight-300,
                400: $font-weight-400,
                500: $font-weight-500,
                600: $font-weight-600,
                700: $font-weight-700,
                800: $font-weight-800,
                900: $font-weight-900,
                base: $font-weight-base
            )
        ),
        "line-height": (
            property: line-height,
            class: lh,
            values: (
                1: 1,
                sm: $line-height-sm,
                base: $line-height-base,
                lg: $line-height-lg,
            )
        ),
        "text-align": (
            responsive: true,
            property: text-align,
            class: text,
            values: (
                start: left,
                end: right,
                center: center,
            )
        ),
        "text-decoration": (
            property: text-decoration,
            values: none underline line-through
        ),
        "text-transform": (
            property: text-transform,
            class: text,
            values: lowercase uppercase capitalize
        ),
        "white-space": (
            property: white-space,
            class: text,
            values: (
                wrap: normal,
                nowrap: nowrap,
            )
        ),
        "word-wrap": (
            property: word-wrap word-break,
            class: text,
            values: (
                break: break-word
            ),
        ),
        // color utilities
        "color": (
            property: color,
            class: text,
            local-vars: (
                "text-opacity": 1
            ),
            values: map-merge(
                $utilities-text-colors,
                (
                    "body-secondary": var(--#{$prefix}secondary-color),
                    "body-tertiary": var(--#{$prefix}tertiary-color),
                    "body-emphasis": var(--#{$prefix}emphasis-color),
                    "reset": inherit
                )
            )
        ),
        "text-opacity": (
            css-var: true,
            class: text-opacity,
            values: (
                25: .25,
                50: .5,
                75: .75,
                100: 1
            )
        ),
        "text-color": (
            property: color,
            class: text,
            values: $utilities-text-emphasis-colors
        ),
        // link utilities
        "link-opacity": (
            css-var: true,
            class: link-opacity,
            state: hover,
            values: (
                10: .1,
                25: .25,
                50: .5,
                75: .75,
                100: 1
            )
        ),
        "link-offset": (
            property: text-underline-offset,
            class: link-offset,
            state: hover,
            values: (
                1: .125em,
                2: .25em,
                3: .375em,
            )
        ),
        "link-underline": (
            property: text-decoration-color,
            class: link-underline,
            local-vars: (
                "link-underline-opacity": 1
            ),
            values: map-merge(
                $utilities-links-underline,
                ( null: rgba(var(--#{$prefix}link-color-rgb), var(--#{$prefix}link-underline-opacity, 1)), )
            )
        ),
        "link-underline-opacity": (
            css-var: true,
            class: link-underline-opacity,
            state: hover,
            values: (
                0: 0,
                10: .1,
                25: .25,
                50: .5,
                75: .75,
                100: 1
            )
        ),
        // background utilities
        "background-color": (
            property: background-color,
            class: bg,
            local-vars: (
                "bg-opacity": 1
            ),
            values: map-merge($theme-colors, ("transparent": transparent))
        ),
        "bg-opacity": (
            css-var: true,
            class: bg-opacity,
            values: (
                10: .1,
                25: .25,
                50: .5,
                75: .75,
                100: 1
            )
        ),
        "subtle-background-color": (
            property: background-color,
            class: bg,
            values: $utilities-bg-subtle
        ),
        // gradient utilities
        "gradient": (
            property: background-image,
            class: bg,
            values: (
                gradient: var(--#{$prefix}gradient)
            )
        ),
        // interaction utilities
        "user-select": (
            property: user-select,
            values: all auto none
        ),
        "pointer-events": (
            property: pointer-events,
            class: pe,
            values: none auto,
        ),
        // border radius utilities
        "rounded": (
            property: border-radius,
            class: rounded,
            values: (
                null: var(--#{$prefix}border-radius),
                0: 0,
                1: var(--#{$prefix}border-radius-sm),
                2: var(--#{$prefix}border-radius),
                3: var(--#{$prefix}border-radius-lg),
                4: var(--#{$prefix}border-radius-xl),
                5: var(--#{$prefix}border-radius-xxl),
                circle: 50%,
                pill: var(--#{$prefix}border-radius-pill)
            )
        ),
        "rounded-top": (
            property: border-top-left-radius border-top-right-radius,
            class: rounded-top,
            values: (
                null: var(--#{$prefix}border-radius),
                0: 0,
                1: var(--#{$prefix}border-radius-sm),
                2: var(--#{$prefix}border-radius),
                3: var(--#{$prefix}border-radius-lg),
                4: var(--#{$prefix}border-radius-xl),
                5: var(--#{$prefix}border-radius-xxl),
                circle: 50%,
                pill: var(--#{$prefix}border-radius-pill)
            )
        ),
        "rounded-end": (
            property: border-top-right-radius border-bottom-right-radius,
            class: rounded-end,
            values: (
                null: var(--#{$prefix}border-radius),
                0: 0,
                1: var(--#{$prefix}border-radius-sm),
                2: var(--#{$prefix}border-radius),
                3: var(--#{$prefix}border-radius-lg),
                4: var(--#{$prefix}border-radius-xl),
                5: var(--#{$prefix}border-radius-xxl),
                circle: 50%,
                pill: var(--#{$prefix}border-radius-pill)
            )
        ),
        "rounded-bottom": (
            property: border-bottom-right-radius border-bottom-left-radius,
            class: rounded-bottom,
            values: (
                null: var(--#{$prefix}border-radius),
                0: 0,
                1: var(--#{$prefix}border-radius-sm),
                2: var(--#{$prefix}border-radius),
                3: var(--#{$prefix}border-radius-lg),
                4: var(--#{$prefix}border-radius-xl),
                5: var(--#{$prefix}border-radius-xxl),
                circle: 50%,
                pill: var(--#{$prefix}border-radius-pill)
            )
        ),
        "rounded-start": (
            property: border-bottom-left-radius border-top-left-radius,
            class: rounded-start,
            values: (
                null: var(--#{$prefix}border-radius),
                0: 0,
                1: var(--#{$prefix}border-radius-sm),
                2: var(--#{$prefix}border-radius),
                3: var(--#{$prefix}border-radius-lg),
                4: var(--#{$prefix}border-radius-xl),
                5: var(--#{$prefix}border-radius-xxl),
                circle: 50%,
                pill: var(--#{$prefix}border-radius-pill)
            )
        ),
        // visibility utilities
        "visibility": (
            property: visibility,
            class: null,
            values: (
                visible: visible,
                invisible: hidden,
            )
        ),
        // z-index utilities
        "z-index": (
            property: z-index,
            class: z,
            values: $zindex-levels,
        ),
        // custom utilities
        "ff": (
            property: font-family,
            class: ff,
            values: (
                architects-daughter: $ff-architects-daughter,
                allison: $ff-allison,
                mktg: $ff-mktg
            )
        ),
        "letter-spacing": (
            property: letter-spacing,
            class: ls,
            values: (
                0: 0,
                1: .05rem,
                2: .1rem,
                3: .15rem
            )
        ),
        "negative-letter-spacing": (
            property: letter-spacing,
            class: ls,
            values: map-merge($negative-spacers, ("wx": -.15rem))

        ),
        "break-inside": (
            property: break-inside,
            class: break-inside,
            values: (
                auto: auto,
                avoid: avoid
            )
        ),
        "column-count": (
            property: column-count,
            class: column-count,
            values: (
                2: 2,
                3: 3,
                4: 4,
                auto: auto
            )
        ),
        "outline": (
            property: outline,
            class: outline,
            values: (
                solid: solid,
                none: none
            )
        ),
    )
);

// Utilities generator
@mixin generate-utility($utility, $infix: '') {
    $properties: map-get($utility, property);
    $values: map-get($utility, values);

    // If the values are a list or string, convert it into a map.
    @if type-of($values) == 'string' or type-of(nth($values, 1)) != 'list' {
        $values: list.zip($values, $values);
    }

    @if type-of($properties) == 'string' {
        $properties: list.append((), $properties);
    }

    @each $key, $value in $values {

        // If the class key is omitted, the property key is used as the default class name.
        $class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));

        // If custom CSS variable name is present, use it. Otherwise, default to using "class".
        $css-variable-name: if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, class));

        $state: if(map-has-key($utility, state), map-get($utility, state), ());

        $infix: if($class == '' and string.slice($infix, 1, 1) == '-', string.slice($infix, 2), $infix);
        $class-modifier: if($key, if($class == '' and $infix == '', '', '-') + $key, '');

        $is-css-var: map-get($utility, css-var);
        $is-local-vars: map-get($utility, local-vars);

        @if $value != null {
            @if $is-css-var {
                .#{$class + $infix + $class-modifier} {
                    --#{$prefix}#{$css-variable-name}: #{$value};
                }

                @each $pseudo in $state {
                    .#{$class + $infix + $class-modifier}-#{$pseudo}:#{$pseudo} {
                        --#{$prefix}#{$css-variable-name}: #{$value};
                    }
                }
            } @else {
                .#{$class + $infix + $class-modifier} {
                    @each $property in $properties {
                        @if $is-local-vars {
                            @each $local-var, $variable in $is-local-vars {
                                --#{$prefix}#{$local-var}: #{$variable};
                            }
                        }
                        #{$property}: $value if($enable-important-utilities, !important, null);
                    }
                }

                @each $pseudo in $state {
                    .#{$class + $infix + $class-modifier}-#{$pseudo}:#{$pseudo} {
                        @each $property in $properties {
                            @if $is-local-vars {
                                @each $local-var, $variable in $is-local-vars {
                                    --#{$prefix}#{$local-var}: #{$variable};
                                }
                            }
                            #{$property}: $value if($enable-important-utilities, !important, null);
                        }
                    }
                }
            }
        }
    }
};

// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $key, $utility in $utilities {
            @if type-of($utility) == 'map' and (map-get($utility, responsive) or $infix == '') {
                @include generate-utility($utility, $infix);
            }
        }
    }
}

// Print utilities
@media print {
    @each $key, $utility in $utilities {
        @if type-of($utility) == 'map' and map-get($utility, print) == true {
            @include generate-utility($utility, '-print');
        }
    }
}
